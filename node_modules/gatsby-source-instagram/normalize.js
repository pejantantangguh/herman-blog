"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const _require = require(`gatsby-source-filesystem`),
      createRemoteFileNode = _require.createRemoteFileNode;

exports.downloadMediaFile =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    datum,
    store,
    cache,
    createNode,
    createNodeId,
    touchNode
  }) {
    let fileNodeID;

    if (datum.internal.type === `InstaNode`) {
      const mediaDataCacheKey = `instagram-media-${datum.id}`;
      const cacheMediaData = yield cache.get(mediaDataCacheKey); // If we have cached media data reuse
      // previously created file node to not try to redownload

      if (cacheMediaData) {
        fileNodeID = cacheMediaData.fileNodeID;
        touchNode({
          nodeId: cacheMediaData.fileNodeID
        });
      } // If we don't have cached data, download the file


      if (!fileNodeID) {
        try {
          const fileNode = yield createRemoteFileNode({
            url: datum.preview,
            store,
            cache,
            createNode,
            createNodeId
          });

          if (fileNode) {
            fileNodeID = fileNode.id;
            yield cache.set(mediaDataCacheKey, {
              fileNodeID
            });
          }
        } catch (e) {
          console.log(`Could not download file, error is`, e);
        }
      }
    }

    if (fileNodeID) {
      datum.localFile___NODE = fileNodeID;
    }

    return datum;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();